=> Apresenta os 5 primeiros 
db.series.aggregate({$limit:5});

=> Busca e ignora os dois primeiros registros
db.series.aggregate({$skip:2});

=> $match with $and
db.contas.aggregate([
    {$match:
       {$and: [
        {"tipo": "Conta salário"},
        {"valor": {$gt: 8500}}
       ]}
    }
]).sort({valor:1})

=> $match with group
db.contas.aggregate([
    {$match:
       {$and: [
        {"tipo": "Conta salário"},
        {"valor": {$gt: 8500}}
       ]}
    },
    {$group: { _id: "$tipo", contagem:{$count: {}}}}
]).sort({valor:1})

=> Conta o total de registros de uma collection ( Com alias ) 
db.clientes.aggregate({$count: "Total de Clientes"})

=> Ordena por valor
db.series.aggregate([
  {$sort: {"Serie":1}}
]);

=> Limit, Skip and Sort
db.series.aggregate([
    {$limit: 50},
    {$skip: 10},
    {$sort: {"Serie":1}}
])

=> Group by campo contas
db.contas.aggregate({$group: { _id: "$tipo", ContagemDeContas:{$count:{}}}})

=> Group by and Sum 
db.vendas.aggregate({
    $group: {
        _id: "$produto", Contagem:{$count:{}},
        Total: {$sum: "$valor"}
    }
})

=> Group by and Sum (Completo)
db.contas.aggregate({
    $group: { 
        _id: "$tipo", Contagem: {$count: {}},
        TotalEmValor:{$sum: "$valor"},
        TotalEmClientes: {$sum: "$id_cliente"}
    }
})

=> $lookup => Tipo de left join
db.clientes.aggregate([{
    $lookup: {
           from: "contas",
           localField: "cpf",
           foreignField: "cpf",
           as: "clientes_contas"
         }
}])

=> $lookup => Tipo de left join com restrição de campos
db.clientes.aggregate([{
    $lookup: {
           from: "contas",
           localField: "cpf",
           foreignField: "cpf",
           as: "clientes_contas"
        }
    },
    {$project: {_id:0, data_nascimento:0, genero:0, profissao:0}},
    {$limit: 5}
])

=> $round => Cria uma tabela com valore aleatórios
db.clientes.aggregate({
    $project: {
        _id:1,
        valor: {
            $round:[{
                $rand: {}    
            },3]    
            
            
        }
    }
})

=> $multiply => Multiplcação de um campo da tabela
db.contas.aggregate({
    $project: {
        _id:0,
        valor:1,
        multiplica:{
          $round:[{
            $multiply: ['$valor',2]
          },2]
        }
        
    }
})

=> $divide => Add um novo campo de desconto na tabela
db.contas.aggregate({
    $addFields: {
        precoDesconto:{ 
            $round:[{
              $divide: ["$valor", 1.10]
            },2]  
        }
    },
}).project({
    _id:0,
    cpf:1,
    valor:1,
    precoDesconto:1
})

$concat => Concatena Strings
db.clientes.aggregate([{
    $project: {
        descricao:{
            $concat: ["$nome","-","$cpf" ]
        }
    }
}])

$split => Quebra uma string em pedaços
db.clientes.aggregate([{
    $project: {
        descricao:{
            $split: ["$nome"," " ]
        }
    }
}])

$toLower => Retorna uma string em minúscula
$toUpper => Retorna uma string em maiúscula
db.clientes.aggregate([{
    $project: {
        descricao:{
            $toLower: "$nome"
        }
    }
}])

$toString => Converte um campo double em String
db.contas.aggregate([{
    $project: {
        valotStr:{
            $toString: "$valor"
        }
    }
}])

$concat e $toString
db.contas.aggregate([{
    $project: {
        descricao:{
            $concat: ["O cliente e CPF", "$cpf", " possui o valor de ", {$toString: "$valor"}, " na ", "$tipo" ]
        }
    }
}])


